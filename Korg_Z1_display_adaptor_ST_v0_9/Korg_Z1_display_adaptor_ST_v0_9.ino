#define Serial Serial1

const int pinOUT_LED  =  PB4; // [ ] Write Select (Active Low) 
#define pin_LED_1 GPIOB->regs->BSRR |= 0b0000000000010000   
#define pin_LED_0 GPIOB->regs->BRR  |= 0b0000000000010000   

#define pin_LED_OFF GPIOB->regs->BSRR |= 0b0000000000010000   
#define pin_LED_ON GPIOB->regs->BRR   |= 0b0000000000010000   

const unsigned char Image_Splash_Loading [] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x03,0xc2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x14,0x50,0x7c,0xe0,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0xff,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xb4,0x50,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0xff,0x07,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x54,0x50,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0xfe,0x00,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x54,0x50,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0x18,0x01,0xfc,0x00,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x54,0x50,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0x38,0x03,0xf8,0x00,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x14,0x50,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0x30,0x07,0xf0,0x01,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x13,0x9f,0x10,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xe0,0x01,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xc0,0x01,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x80,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe3,0xcf,0x39,0x04,0x0e,0x7c,0xe7,0x80,0x00,0x00,0x7f,0x00,0x02,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x14,0x10,0x11,0x04,0x11,0x11,0x14,0x40,0x00,0x00,0xfe,0x00,0x02,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x14,0x10,0x11,0x04,0x11,0x11,0x14,0x40,0x00,0x01,0xfc,0x00,0x04,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x13,0x90,0x11,0x04,0x11,0x11,0x17,0x80,0x00,0x03,0xf8,0x00,0x04,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x50,0x11,0x04,0x1f,0x11,0x15,0x00,0x00,0x07,0xf0,0x00,0x04,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x10,0x50,0x11,0x04,0x11,0x11,0x14,0x80,0x00,0x0f,0xe0,0x00,0x08,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe7,0x8f,0x39,0xf7,0xd1,0x10,0xe4,0x40,0x00,0x1f,0xc0,0x00,0x08,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x80,0x00,0x08,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x00,0x08,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf4,0x51,0x7d,0x17,0xcf,0x39,0xf7,0xde,0x00,0xfe,0x00,0x20,0x10,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x04,0x51,0x11,0x14,0x10,0x10,0x14,0x11,0x01,0xfc,0x00,0x60,0x11,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x04,0x59,0x11,0x14,0x10,0x10,0x24,0x11,0x03,0xf8,0x00,0xe0,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe2,0x95,0x11,0xf7,0xce,0x10,0x47,0xde,0x07,0xf0,0x01,0xc0,0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x13,0x11,0x14,0x01,0x10,0x84,0x14,0x0f,0xf8,0x0f,0xc0,0xc1,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x11,0x11,0x14,0x01,0x11,0x04,0x12,0x1f,0xff,0xff,0x83,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xe1,0x11,0x11,0x17,0xde,0x39,0xf7,0xd1,0x1f,0xff,0xff,0x03,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xe7,0xc7,0xf0,0xff,0x81,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xe7,0xcf,0xf8,0xff,0xc3,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xe7,0xdf,0xfc,0xff,0xe7,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xef,0xdf,0xfc,0xfb,0xe7,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xef,0x9f,0x7c,0xfb,0xe7,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xef,0x9f,0x7c,0xfb,0xe7,0xdf,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0x1f,0x7c,0xff,0xc7,0xdf,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xfe,0x1f,0x7c,0xff,0x87,0xdf,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0x1f,0x7c,0xff,0xc7,0xdf,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0x9f,0x7c,0xff,0xe7,0xdf,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xef,0x9f,0x7c,0xfb,0xe7,0xdf,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xef,0x9f,0x7c,0xfb,0xe7,0xdf,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xef,0xdf,0xfc,0xfb,0xf7,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xe7,0xdf,0xfc,0xf9,0xf7,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xe7,0xcf,0xf8,0xf9,0xf3,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x0c,0x67,0x3a,0x4e,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xe7,0xc7,0xf0,0xf9,0xf1,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x12,0x94,0x93,0x50,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x12,0x94,0x93,0xd6,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x12,0xf4,0x92,0xd2,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xcc,0x97,0x3a,0x4e,0xa8
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};


/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
#define display_OFF 0b10101110
#define display_ON  0b10101111

#define display_NORMAL  0b10100110
#define display_INVERSE 0b10100111

#define display_all_pixel_OFF 0b00100010
#define display_all_pixel_ON  0b00100011

const int countPerLine_Pixel  =  240;
const int countTotal_Lines    =   64;
const int countPerLine_CP     =   60; // countPerLine_Pixel / 4 (4 pixels transferred with every Charcter Pulse(CP))
const int countTotal_CP       = 3840; // countPerLine_CP   x countTotal_Line

const int countTotal_Bit      = 15360; // 240 x 64

const int countPerLine_Byte   =   30; // countPerLine_Pixel / 8 (8 pixels per byte)
const int countPerColumn_Byte =  8; // countTotal_Lines / 8 (8 pixels per byte)
const int countTotal_Byte     = 1920; // countPerLine_Byte x countTotal_Line

const int lcd_initialByteBatchSize = 10;
const int lcd_byteBatchSize = 15;

////////////////////////////////////////////////////////////////////
// INPUT PINS FROM Z1
////////////////////////////////////////////////////////////////////
const int pinIn_FLM = PB9; // PB3 ; // [ 7] First Line Marker (Vertical Sync)
#define bitTest_FLM ((GPIOB->regs->IDR & 0b0000001000000000)==0b0000001000000000) // #define bitTest_FLM ((GPIOB->regs->IDR & 0b0000000000001000)==0b0000000000001000)
#define FLM_is_HIGH ((GPIOB->regs->IDR & 0b0000001000000000)==0b0000001000000000)
#define FLM_is_LOW  ((GPIOB->regs->IDR & 0b0000001000000000)!=0b0000001000000000)

                            // [ 8] LCD CLK 
const int pinIn_CP  = PB7; // PA15; // [ 9] Character Pulse
#define bitTest_CP ((GPIOB->regs->IDR & 0b0000000010000000)==0b0000000010000000) // #define bitTest_CP ((GPIOA->regs->IDR & 0b1000000000000000)==0b1000000000000000)
#define CP_is_1 ((GPIOB->regs->IDR & 0b0000000010000000)==0b0000000010000000)
#define CP_is_0 ((GPIOB->regs->IDR & 0b0000000010000000)!=0b0000000010000000)

const int pinIn_LP  = PB6; // PA12; // [10] Line Pulse (Horisontal Sync)
#define bitTest_LP ((GPIOB->regs->IDR & 0b0000000001000000)==0b0000000001000000)
#define LP_is_1 ((GPIOB->regs->IDR & 0b0000000001000000)==0b0000000001000000)
#define LP_is_0 ((GPIOB->regs->IDR & 0b0000000001000000)!=0b0000000001000000)


const int pinIn_D3  = PB15; // PA11; // [11] Data bit 3
const int pinIn_D2  = PB14; // PA10; // [12] Data bit 2
const int pinIn_D1  = PB13; // PA9 ; // [13] Data bit 1
const int pinIn_D0  = PB12; // PA8 ; // [14] Data bit 0

const int _FLM = 9; // 3 ; // [ 7] First Line Marker (Vertical Sync)
const int _CP  = 7; // 15; // [ 9] Character Pulse
const int _LP  = 6; // 12; // [10] Line Pulse (Horisontal Sync)



////////////////////////////////////////////////////////////////////
// OUTPUT PINS TO LCD
////////////////////////////////////////////////////////////////////

// LEDA : LED Backlight (0=Off; 1=On) 
const int pinOUT_LEDA  = PC13; // PC15;
#define pin_LEDA_1 GPIOC->regs->BSRR |= 0b0010000000000000   // #define pin_LEDA_1 GPIOC->regs->BSRR |= 0b1000000000000000   
#define pin_LEDA_0 GPIOC->regs->BRR  |= 0b0010000000000000   // #define pin_LEDA_0 GPIOC->regs->BRR  |= 0b1000000000000000   

// RS : Data/Instruction register (0=Command; 1=Data)
const int pinOUT_RS  = PC14; //PB0;
#define pin_RS_0 GPIOC->regs->BRR  |= 0b0100000000000000    // #define pin_RS_0 GPIOB->regs->BRR  |= 0b0000000000000001   
#define pin_RS_1 GPIOC->regs->BSRR |= 0b0100000000000000    // #define pin_RS_1 GPIOB->regs->BSRR |= 0b0000000000000001   
#define pin_RS_cmnd GPIOC->regs->BRR  |= 0b0100000000000000 //  #define pin_RS_cmnd GPIOB->regs->BRR  |= 0b0000000000000001
#define pin_RS_data GPIOC->regs->BSRR |= 0b0100000000000000 //  #define pin_RS_data GPIOB->regs->BSRR |= 0b0000000000000001

// /RD : Read register (0=Read; 1=Normal)
const int pinOUT_RD  = PC15; //PB1;
#define pin_RD_0 GPIOC->regs->BRR  |= 0b1000000000000000   // #define pin_RD_0 GPIOB->regs->BRR  |= 0b0000000000000010   
#define pin_RD_1 GPIOC->regs->BSRR |= 0b1000000000000000   // #define pin_RD_1 GPIOB->regs->BSRR |= 0b0000000000000010   

// /WR : Write register (0=Write; 1=Normal)
const int pinOUT_WR  = PB10;
#define pin_WR_0 GPIOB->regs->BRR  |= 0b0000010000000000   
#define pin_WR_1 GPIOB->regs->BSRR |= 0b0000010000000000   

// /RST : Reset (0=Reset; 1=Normal)
const int pinOUT_RST  = PB11;
#define pin_RST_0 GPIOB->regs->BRR  |= 0b0000100000000000   
#define pin_RST_1 GPIOB->regs->BSRR |= 0b0000100000000000   

const int pinIN_Contrast  = PB0;

#define port_OUT GPIOA->regs->CRL = 0x33333333
#define port_IN  GPIOA->regs->CRL = 0x88888888

const int cmnd = 0;
const int data = 1;

const int Command = 0;
const int Data = 1;

// CONTRAST
int lcd_contrast = 0;
int lcd_contrast_old = -1;
const int lcd_contrast_interval = 10;
int lcd_contrast_cntr;

int autoMode = 0;

int dm[countTotal_Byte];
//bit z1[countTotal_Bit];
int ix_lp  = 0; // LP active line
int _ix_lp;
int ix_lcd = -1;

int lcd_x = 0;
int lcd_y = 0;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup(){
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  

  //disableDebugPorts();
  afio_cfg_debug_ports(AFIO_DEBUG_SW_ONLY);


  GPIOA->regs->CRL = 0x33333333;
  GPIOA->regs->CRH = 0x33333333;
  GPIOB->regs->CRL = 0x33333330;
  GPIOB->regs->CRH = 0x33333333;
  GPIOC->regs->CRH = 0x33333333;

  pinMode(pinIN_Contrast, INPUT_ANALOG);
  
  noInterrupts();

 lcd_init();

}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void lcd_init(){
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  // LCD Reset
  for (int f=0; f<1000000; f++) pin_RST_0;
  pin_RST_1;
  
  pin_RS_0;
  pin_WR_1;
  pin_RD_1;
  pin_LEDA_1;

//delay(1000);
//  lcd_wr_(cmnd, display_ON);
//delay(1000);
//  lcd_wr_(cmnd, display_all_pixel_ON);

  
  //Reset_ms(10);
  lcd_wr_(cmnd, 0x30); // Extension cmnd 1
  lcd_wr_(cmnd, 0x6E); //Enable Master
  lcd_wr_(cmnd, 0x31); // Extension cmnd 2
  lcd_wr_(cmnd, 0xD7); // Disable Auto Read
  lcd_wr_(data, 0x9F);
  
  lcd_wr_(cmnd, 0xE0); // Enable OTP Read
  lcd_wr_(data, 0x00);
  delay(10);
  lcd_wr_(cmnd, 0xE3); // OTP Up-Load
  delay(20);
  lcd_wr_(cmnd, 0xE1); // OTP Control Out
  
  lcd_wr_(cmnd, 0x30); // Extension cmnd 1
  lcd_wr_(cmnd, 0x94); // Sleep Out
  lcd_wr_(cmnd, 0xAE); // Display OFF
  delay(50);
  lcd_wr_(cmnd, 0x20); // Power Control
  lcd_wr_(data, 0x0B); // VB, VR, VF All ON
  
  lcd_wr_(cmnd, 0x81); // Set Vop = 16V
  lcd_wr_(data, 0x36); // lcd_wr_(data, 0x36);
  lcd_wr_(data, 0x05); // lcd_wr_(data, 0x04);
  
  lcd_wr_(cmnd, 0x31); // Extension cmnd 2
  lcd_wr_(cmnd, 0x32); // Analog Circuit Set
  lcd_wr_(data, 0x00);
  lcd_wr_(data, 0x01); // lcd_wr_(data, 0x01); // Booster Efficiency =6KHz
  lcd_wr_(data, 0x02); // lcd_wr_(data, 0x02); //Bias=1/12
  
  lcd_wr_(cmnd, 0x51); // Booster Level x10
  lcd_wr_(data, 0xFB); //lcd_wr_(data, 0xFB);

//lcd_wr_(cmnd, 0x0A); // Data Format 
  
  lcd_wr_(cmnd, 0x30); // Extension cmnd 1
  lcd_wr_(cmnd, 0XF0); // Display Mode
  lcd_wr_(data, 0x10); // Monochrome Mode
  lcd_wr_(cmnd, 0xCA); // Display Control
  lcd_wr_(data, 0x00); // CL Dividing Ratio -> Not Divide
  lcd_wr_(data, 0XA1); // Duty Set -> 162 Duty
  
  lcd_wr_(data, 0x00); // Frame Inversion
  
  lcd_wr_(cmnd, 0xBC); // data Scan Direction
  //lcd_wr_(data, 0x06); //lcd_wr_(data, 0x00);
  lcd_wr_(data, 0x02); //lcd_wr_(data, 0x00);
  
  lcd_wr_(cmnd, 0xA6);
  lcd_wr_(cmnd, 0x31); // Extension cmnd 2
  lcd_wr_(cmnd, 0x40); // Internal Power Supply
  lcd_wr_(cmnd, 0x30); // Extension cmnd 1
  lcd_wr_(cmnd, 0x77); // Enable ICON RAM
  lcd_wr_(cmnd, 0x15); // Column Address Setting
  lcd_wr_(data, 0x00); // SEG0 -> SEG255
  lcd_wr_(data, 0xFF);
  //Clear_ICON_DDRAM(); //Clear Whole ICON DDRAM by “0”
  lcd_wr_(cmnd, 0x76); // Disable ICON RAM
  lcd_wr_(cmnd, 0x75); // Page Address Setting
  lcd_wr_(data, 0x00); // COM0 -> COM161
  lcd_wr_(data, 0x14);
  //Clear_DDRAM(); // Clear Whole DDRAM by “0”
  lcd_wr_(cmnd, 0x30); // Extension cmnd 1
  
  lcd_wr_(cmnd, 0x15); // Column Address Setting
//  lcd_wr_(data, 0x00); // SEG0 -> SEG255
//  lcd_wr_(data, 239);//lcd_wr_(data, 0xFF);
  lcd_wr_(data, 16); // SEG0 -> SEG255
  lcd_wr_(data, 255);//lcd_wr_(data, 0xFF);
  
  lcd_wr_(cmnd, 0x75); // Page Address Setting
  lcd_wr_(data, 0x00); // COM0 -> COM161
  lcd_wr_(data, 0x07);//lcd_wr_(data, 0x14);
  
  //Disp_Image(); // Fill the DDRAM data by Panel
  //Resolution
  lcd_wr_(cmnd, 0xAF); // Display ON
  
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void z1_readLine(int _line){
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
  #define CP_changed_from_HIGH_to_LOW (((_prevB & 0b0000000011000000) == 0b0000000010000000) && ((_portB & 0b0000000011000000) == 0b0000000000000000))
  int _dm;
  int _portB = GPIOB->regs->IDR;
  int _prevB; 
  
  int _ix = _line * countPerLine_Byte; 
  int _ix_end = _ix + countPerLine_Byte; 

  for(_ix; _ix < _ix_end; _ix++){

    nibble1://<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      _prevB = _portB;
      _portB = GPIOB->regs->IDR;
      if (CP_changed_from_HIGH_to_LOW)  
        _dm = highByte(_portB & 0b1111000000000000);  // Read high byte so bits 15,14,13,12 end up as bits 7,6,5,4. Do an AND beforehand to zero all bits other than 15,14,13,12.
      else goto nibble1;        
    
    nibble2://<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      _prevB = _portB;
      _portB = GPIOB->regs->IDR; 
      if (CP_changed_from_HIGH_to_LOW)  
        _dm |= highByte(_portB >> 4 & 0b0000111100000000);  // SHIFT bits 15,14,13,12 by 4 positions, so they end up as bits 3,2,1,0. Do an AND beforehand to zero all bits other than 15,14,13,12.  
      else goto nibble2; 
    
    dm[_ix] = _dm;
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
void lcd_wr_(int _mode, int _data){
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  

  if (_mode == cmnd) pin_RS_cmnd; 
  else pin_RS_data; // clr_CD;
  // Write _data to port
  GPIOA->regs->BRR |= 0b0000000011111111;  
  GPIOA->regs->BSRR |= _data;  
  pin_WR_0; // Latch _data into LCD  
  pin_WR_1;
}  

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void lcd_wr_cmnd_data(int c0, int d0, int d1){
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  lcd_wr_(data, d0);
  lcd_wr_(data, d1);
  lcd_wr_(cmnd, c0);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
void lcd_print(int _byteBlocks){
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
/* _byteBlocks is the number of by bytes blocks to print at a time. a Block consists of 8 bytes stacked vertically
 * A value of 0 means the whole array should be written in one go
 * [8 bits]--->Write direction
 * [8 bits]
 * [8 bits]
 * [8 bits]
 * [8 bits]
 * [8 bits]
 * [8 bits]
 * [8 bits]
 * 
 * 
 */
  if (_byteBlocks == 0){
    lcd_x = 0;
    lcd_y = 0;
    _byteBlocks = countPerLine_Byte * countPerColumn_Byte;
  }
  
  byte result;
  byte b0;
  byte b1;
  byte b2;
  byte b3;
  byte b4;
  byte b5;
  byte b6;
  byte b7;
  int yy;
  
  if (lcd_y == 0){
    if (lcd_x == 0){
      lcd_wr_(cmnd, 0x5C);
    }
  }
  while (_byteBlocks > 0){
    yy = lcd_y * 30 * countPerColumn_Byte;
    b0 = dm[yy + 30 * 0 + lcd_x];
    b1 = dm[yy + 30 * 1 + lcd_x];
    b2 = dm[yy + 30 * 2 + lcd_x];
    b3 = dm[yy + 30 * 3 + lcd_x];
    b4 = dm[yy + 30 * 4 + lcd_x];
    b5 = dm[yy + 30 * 5 + lcd_x];
    b6 = dm[yy + 30 * 6 + lcd_x];
    b7 = dm[yy + 30 * 7 + lcd_x];

    for (byte f=0; f<8; f++){
      result = 0;
      if ((b7 >> (7 - f)) & 1) result += 1;
      if ((b6 >> (7 - f)) & 1) result += 2;
      if ((b5 >> (7 - f)) & 1) result += 4;
      if ((b4 >> (7 - f)) & 1) result += 8;
      if ((b3 >> (7 - f)) & 1) result += 16;
      if ((b2 >> (7 - f)) & 1) result += 32;
      if ((b1 >> (7 - f)) & 1) result += 64;
      if ((b0 >> (7 - f)) & 1) result += 128;
      lcd_wr_(data, result);
    }
    lcd_x++;
    if (lcd_x >= countPerLine_Byte){
      lcd_y++;
      if (lcd_y >= countPerColumn_Byte){
        lcd_y = 0;    
      }
      lcd_x = 0;
    }
    _byteBlocks--;
  }
}

//#####################################################################################################################################################
void array_populate_image(){
//#####################################################################################################################################################  
  for (int i=0; i<countTotal_Byte; i++){
    dm[i] = Image_Splash_Loading[i];    
  }
}

//#####################################################################################################################################################
void array_2_lcd(){
//#####################################################################################################################################################
  for (int i=0; i<countTotal_Byte; i++){
    dm[i] = 0;    
    lcd_wr_(data, 0);
  }
}

//#####################################################################################################################################################
void clrScrn(){
//#####################################################################################################################################################
  lcd_wr_(cmnd, 0x5C);
  for (int i=0; i<countTotal_Byte; i++){
    dm[i] = 0;    
    lcd_wr_(data, random(255));
  }
}

//#####################################################################################################################################################
void lcd_random(){
//#####################################################################################################################################################
  
  //lcd_wr_(cmnd, 0x5C);
  for (int i=0; i<countTotal_Byte; i++){  
    lcd_wr_(data, random(255));
  }
}

//#####################################################################################################################################################
void lcd_clr(){
//#####################################################################################################################################################
  
  //lcd_wr_(cmnd, 0x5C);
  for (int i=0; i<countTotal_Byte; i++){  
    lcd_wr_(data, random(0));
  }
}

//#####################################################################################################################################################
void lcd_set_contrast(int _cont){
//#####################################################################################################################################################
  lcd_wr_(cmnd, 0x81);
  //lcd_wr_(data, _cont % 512); // lcd_wr_(data, 0x36);
  //lcd_wr_(data, _cont / 512); // lcd_wr_(data, 0x04);  
  _cont = (_cont / 4) + 320;
  lcd_wr_(data, _cont % 64); // lcd_wr_(data, 0x36);
  lcd_wr_(data, _cont / 64); // lcd_wr_(data, 0x04);  
  
}

//#####################################################################################################################################################
void lcd_check_contrast(int _interval){
//#####################################################################################################################################################
  lcd_contrast_cntr--;        
  if (lcd_contrast_cntr == 0){
    lcd_contrast_cntr = _interval;
    lcd_contrast = adc_read(ADC1, 8);
    if (abs(lcd_contrast - lcd_contrast_old) > 8){
      lcd_set_contrast(lcd_contrast);
      lcd_contrast_old = lcd_contrast;
    }
  }
}


//#####################################################################################################################################################
void loop(){
//#####################################################################################################################################################

  /* Contrast */
  lcd_contrast = adc_read(ADC1, 8);
  lcd_contrast_old = -1;
  
  /* Splash */
  clrScrn();
  array_populate_image();
  lcd_print(0);

  // Wait until display data is received from Z1
  while (GPIOB->regs->IDR == 0){
    lcd_check_contrast(lcd_contrast_interval);
  }

  mainLoop:

    //if ((GPIOB->regs->IDR & 0b0000001000000000)==0b0000001000000000) {  
    if (FLM_is_HIGH){  
      if (ix_lp != 0){
        ix_lp = 0;
        
        lcd_check_contrast(lcd_contrast_interval);
      }
      
    }
    ix_lp++; 
    if (ix_lp > countTotal_Lines - 1) ix_lp = 0;
    
    z1_readLine(ix_lp);
    
    pin_LED_1;
    lcd_print(4);
    pin_LED_0;
    
  goto mainLoop;

}  
  
  
  
